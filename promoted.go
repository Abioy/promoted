package promoted

import (
	"reflect"
	"runtime"
)

// Promoted returns if a method is promoted or not.
func Promoted(t reflect.Type, method string) (bool, bool) {
	var promoted, exist bool
	if m, ok := t.MethodByName(method); ok {
		f := runtime.FuncForPC(m.Func.Pointer())
		fname, _ := f.FileLine(f.Entry())
		promoted = fname == "<autogenerated>"
		exist = ok
	}
	return promoted, exist
}

// PromotedFrom returns if a method is promoted from base or not,
// assume that base did have the specified method.
func PromotedFrom(curr, base reflect.Type, method string) bool {
	if curr.Kind() == reflect.Pointer {
		curr = curr.Elem()
	}

	if curr == base {
		return true
	}

	promoted, exist := Promoted(curr, method)
	if !exist {
		return false
	}
	if !promoted {
		return false
	}

	// promoted method, check fields
	for i := 0; i < curr.NumField(); i++ {
		f := curr.Field(i)
		if !f.Anonymous {
			continue
		}
		if ret := PromotedFrom(f.Type, base, method); ret {
			return true
		}
	}
	return false
}

// typeGetOverriddenMethods returns all methods declare in api that are overridden in impl and original promoted from base.
// Assume that impl and base both implement api.
func typeGetOverriddenMethods(impl, base, api reflect.Type) []string {
	methods := make([]string, 0)

	for i := 0; i < api.NumMethod(); i++ {
		method := api.Method(i).Name
		if !PromotedFrom(impl, base, method) {
			methods = append(methods, method)
		}
	}
	return methods
}

// GetOverriddenMethods returns all methods declare in api that are overridden in impl and original promoted from base.
// Assume that impl and base both implement interface api.
// It panic if api is not interface.
func GetOverriddenMethods(impl, base, api any) []string {
	it := reflect.ValueOf(impl).Type()
	bt := reflect.ValueOf(base).Type()
	if bt.Kind() == reflect.Pointer {
		bt = bt.Elem()
	}
	iface := reflect.ValueOf(api).Type()
	if iface.Kind() == reflect.Pointer {
		iface = iface.Elem()
	}

	if iface.Kind() != reflect.Interface {
		if iface != bt {
			panic("illegal")
		}
	}
	return typeGetOverriddenMethods(it, bt, iface)
}
